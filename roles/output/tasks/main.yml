---
- name: "Ensure BBOT secrets file exists"
  become: false
  shell:
    executable: "/usr/bin/python3"
    cmd: "from bbot.core import configurator"
    creates: "{{ secrets_yml }}"

- name: "Ensure output_modules exists in secrets.yml"
  become: false
  lineinfile:
    path: "{{ secrets_yml }}"
    regexp: "^#*\\s*output_modules:"
    line: "output_modules:"

- name: "Set max_threads in bbot.yml"
  become: false
  lineinfile:
    path: "{{ bbot_yml }}"
    regexp: "^#*\\s*max_threads:"
    line: "max_threads: 300"

- name: "Set max_dns_threads in bbot.yml"
  become: false
  lineinfile:
    path: "{{ bbot_yml }}"
    regexp: "^#*\\s*max_dns_threads:"
    line: "max_dns_threads: 200"

- name: "Insert neo4j output module into config"
  vars:
    tf: "{{ playbook_dir }}/tf/"
  become: false
  replace:
    path: "{{ secrets_yml }}"
    regexp: |-
      #* ?(  )neo4j:
      #* ?    username:.*
      #* ?    password:.*
    replace: |-
        \1neo4j:
        \1  username: "neo4j"
        \1  password: "{{ lookup('password', 'tf/neo4j-pw.txt length=25 chars=ascii_letters,digits') }}"

- name: "Generate output document"
  delegate_to: localhost
  delegate_facts: no
  become: false
  vars:
    tf: "{{ playbook_dir }}/tf/"
  template:
    src: "readme.j2"
    dest: "{{ playbook_dir }}/{{ output_file }}"

- name: Provisioned successfully
  delegate_to: localhost
  delegate_facts: no
  vars:
    extra_lines: "This information can also be found in {{ playbook_dir }}/{{ output_file }}"
    raw_lines: "{{ lookup('file', '{{ playbook_dir }}/{{ output_file }}') }}\n\n{{ extra_lines }}"
    padded_lines: |
      {% for line in raw_lines.split('\n') %}
      {{ "{:<80}".format(line) }}
      {% endfor %}
  debug:
    msg: "{{ padded_lines.split('\n') }}"